import java.io.*;
import java.net.*;
import java.util.*;

public class Server {

	private ServerSocket serverSocket;
	Server(int port) {

		try
		{
			serverSocket = new ServerSocket(port);
			System.out.println("Server waiting for client on port " + serverSocket.getLocalPort());

			while(true)
			{
				Socket socket = serverSocket.accept();  // accept connection
				System.out.println("New client asked for a connection");
				TcpThread t = new TcpThread(socket);    // make a thread of it
				System.out.println("Starting a thread for a new Client");
				t.start();
			}
		}
		catch (IOException e) {
			System.out.println("Exception on new ServerSocket: " + e);
		}
	}      
	public static void main(String[] arg) {
		new Server(1500);
	}

	class TcpThread extends Thread {
		Socket socket;
		ObjectInputStream Sinput;
		ObjectOutputStream Soutput;

		TcpThread(Socket socket) {
			this.socket = socket;
		}
		public void run() {
			System.out.println("Thread trying to create Object Input/Output Streams");
			try
			{
				Soutput = new ObjectOutputStream(socket.getOutputStream());
				Soutput.flush();
				Sinput  = new ObjectInputStream(socket.getInputStream());
			}
			catch (IOException e) {
				System.out.println("Exception creating new Input/output Streams: " + e);
				return;
			}
			boolean bool = true;
			new Listen().start();
			System.out.println("Thread waiting for a String from the Client");
			Scanner scan = new Scanner(System.in);
			while(bool) {
				System.out.print("> ");
				String msg = scan.nextLine();
				if(msg != null) {
					if(msg.equalsIgnoreCase("LOGOUT"))  {
						bool = false;
					}
					try {
						Soutput.writeObject(msg);
					}
					catch(IOException e) {
						System.out.println("Error writting to the socket: " + e);
					}
				}
			}
			scan.close();
			try {
				Soutput.close();
				Sinput.close();
			}
			catch (Exception e) {                  
			}
		}
		class Listen extends Thread {
			public void run() {
				while(true) {
					try {
						String str = (String) Sinput.readObject();
						System.out.println();
						System.out.println(str);
						System.out.print("> ");
					}
					catch (IOException e) {
						System.out.println("Exception reading/writing  Streams: " + e);
						return;            
					}
					catch (ClassNotFoundException o) {             
					}
				}
			}
		}
	}	
}

import java.net.*;
import java.io.*;
import java.util.*;

public class Client {

	ObjectInputStream Sinput;
	ObjectOutputStream Soutput;
	Socket socket;

	Client(int port) {
		try {
			socket = new Socket("192.168.0.3", port);
		}
		catch(Exception e) {
			System.out.println("Error connectiong to server:" + e);
			return;
		}
		System.out.println("Connection accepted " +
				socket.getInetAddress() + ":" +
				socket.getPort() + "\n");

		try
		{
			Sinput  = new ObjectInputStream(socket.getInputStream());
			Soutput = new ObjectOutputStream(socket.getOutputStream());
		}
		catch (IOException e) {
			System.out.println("Exception creating new Input/output Streams: " + e);
			return;
		}
		new Listen().start();
		boolean bool = true;
		Scanner scan = new Scanner(System.in);
		while(bool) {
			System.out.print("> ");
			String msg = scan.nextLine();
			if(msg != null) {
				if(msg.equalsIgnoreCase("LOGOUT"))  {
					bool = false;
				}
				try {
					Soutput.writeObject(msg);
				}
				catch(IOException e) {
					System.out.println("Error writting to the socket: " + e);
				}
			}
		}
		scan.close();
		String response;
		try {
			response = (String) Sinput.readObject();
			System.out.println("Read back from server: " + response);
		}
		catch(Exception e) {
			System.out.println("Problem reading back from server: " + e);
		}

		try{
			Sinput.close();
			Soutput.close();
		}
		catch(Exception e) {}
	}

	public static void main(String[] arg) {
		new Client(1500);
	}
	class Listen extends Thread {
		public void run() {
			while(true) {
				try {
					String str = (String) Sinput.readObject();
					System.out.println();
					System.out.println(str);
					System.out.print("> ");
				}
				catch (IOException e) {
					System.out.println("Exception reading/writing  Streams: " + e);
					return;            
				}
				catch (ClassNotFoundException o) {             
				}
			}
		}
	}
}
